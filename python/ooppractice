class point:
    def __init__(self,x,y):
        self.cod_x=x
        self.cod_y=y
    def __str__(self):
        return '({},{})'.format(self.cod_x,self.cod_y)


    def euclidean_distance(self,other):
        return ((self.cod_x-other.cod_x)**2+(self.cod_y-other.cod_y)**2)**0.5

    def origin_distance(self):
        # return ((self.cod_x)**2+(self.cod_y)**2)**0.5 it is main logic 
        return self.euclidean_distance(point(0,0))
    
class line:
    def __init__(self,A,B,C):
        
      self.A=A
      self.B=B
      self.C=C
    def __str__(self):
        return '{}x + {}y + {} =0'.format(self.A,self.B,self.C)  

    def point_on_line(line,point):
      if line.A*point.cod_x + line.B*point.cod_y + line.C ==0:
          return "point lies on the line"
      else:
          return "point does not lies on line"
    def shortest_distance(line,point) :

      return abs(line.A*point.cod_x + line.B*point.cod_y + line.C)/((line.A)**2+(line.B)**2+(line.C)**2)**0.5




p1=point(4,3)
p2=point(2,0)
print(p1)
print(p2) 
print(p1.euclidean_distance(p2))
print(p1.origin_distance())
l1=line(2,3,-4)
print(l1)
print(l1.point_on_line(p2))
print(l1.shortest_distance(p2))#if point lies on line so distance will be 0.0
         
    
